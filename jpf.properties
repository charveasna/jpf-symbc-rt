# project config for jpf-symbc-rt extension
# only process this properties file if on top of the jpf-core model classes

jpf-symbc-rt = ${config_path}

# we need to use ';' delimiters so that NetBeans/Ant can use this as a path spec
jpf-symbc-rt.native_classpath=\
  ${jpf-symbc-rt}/build/jpf-symbc-rt-classes.jar;\
  ${jpf-symbc-rt}/build/jpf-symbc-rt.jar;\
  ${jpf-symbc-rt}/lib/juppaal_1.0.0.jar;\
  ${jpf-symbc-rt}/lib/jdom.jar;\
  ${jpf-symbc-rt}/lib/jaxen.jar;\

jpf-symbc-rt.classpath=\
  ${jpf-symbc-rt}/build/jpf-symbc-rt-classes.jar;\
  ${jpf-symbc-rt}/build;\
  ${jpf-symbc}/build/classes;\
  ${jpf-symbc}/build/tests;\
  ${jpf-symbc-rt}/lib/scjNoRelativeTime_1.0.0.jar;\
  ${jpf-symbc-rt}/build/examples;\
  ${jpf-symbc-rt}/build/tests;\

jpf-symbc-rt.test_classpath=\
  ${jpf_symbc_rt}/build/tests


### configurations specific to the symbc project

# note we have to use the "+<key>=.." prepend notation since the NetBeans/Ant
# property parser doesn't like recursion
+peer_packages = gov.nasa.jpf.symbc.realtime;

#jvm.insn_factory.class=gov.nasa.jpf.symbc.SymbolicInstructionFactory

# no state matching
vm.storage.class=nil

